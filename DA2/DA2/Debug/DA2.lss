
DA2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000cc  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000090  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000e0  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000064  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013d  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000063  00000000  00000000  000005c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_subroutine>:
	/*
	TCNT= 2^16 - (0.25 sec at 8MHz)/ Prescalar
	Prescalar = 2^(-2)*2^3*10^6/2^16 = 30.57
	Use Prescalar greater than 30
	*/
	TCCR1A = 0; //9-bit PWM
  80:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0X03; // setting to 011
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	80 93 81 00 	sts	0x0081, r24
					//divides the clock by 64
	TCNT1 = 0x85EE;	// TCNT = 34286, tick of system clock
  8a:	8e ee       	ldi	r24, 0xEE	; 238
  8c:	95 e8       	ldi	r25, 0x85	; 133
  8e:	90 93 85 00 	sts	0x0085, r25
  92:	80 93 84 00 	sts	0x0084, r24
	
	while ((TIFR1&0X01)==0x00)	//loops when Bit0 of TIFR1 is 0
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <delay_subroutine+0x16>
		{
			//loop
		}
		TIFR1 = 0X01; // clears the interrupt flag
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	86 bb       	out	0x16, r24	; 22
  9e:	08 95       	ret

000000a0 <main>:
#include <avr/interrupt.h>
void delay_subroutine(void);	//delay subroutine

int main(void)
{
	DDRB = 0XFF;	//set PORTB as output
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;	//set PORTC as output
  a4:	87 b9       	out	0x07, r24	; 7
	
	PORTB = 0X20;	//sets PORTB.5 to display the waveform with 0.5 period and 50% DC
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	85 b9       	out	0x05, r24	; 5
	
	EIMSK = (1<<INT0);	//enable external interrupt 0
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC11); // rising edge generates an interrupt request
  ae:	e9 e6       	ldi	r30, 0x69	; 105
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	80 83       	st	Z, r24
	
	TCNT0 = 0X00; // 8-bit counter 
  b8:	16 bc       	out	0x26, r1	; 38
	sei(); //enable external interrupts
  ba:	78 94       	sei
	
	 while(1)
    {
        delay_subroutine();
		PORTB = 0X20; //display the delay on PORTB.5
  bc:	d0 e2       	ldi	r29, 0x20	; 32
		TCNT0++;	//8 bit counter counting every rising edge
		
		PORTC = TCNT0;	//displaying the state of counter on PORTC
		
		if((TCNT0 % 5)==0)	//checks if the 5th rising pulse is encountered
  be:	cd ec       	ldi	r28, 0xCD	; 205
		{
			PORTB ^= 0X10;	//toggle PORTB.4 
  c0:	10 e1       	ldi	r17, 0x10	; 16
	TCNT0 = 0X00; // 8-bit counter 
	sei(); //enable external interrupts
	
	 while(1)
    {
        delay_subroutine();
  c2:	0e 94 40 00 	call	0x80	; 0x80 <delay_subroutine>
		PORTB = 0X20; //display the delay on PORTB.5
  c6:	d5 b9       	out	0x05, r29	; 5
		TCNT0++;	//8 bit counter counting every rising edge
  c8:	86 b5       	in	r24, 0x26	; 38
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	86 bd       	out	0x26, r24	; 38
		
		PORTC = TCNT0;	//displaying the state of counter on PORTC
  ce:	86 b5       	in	r24, 0x26	; 38
  d0:	88 b9       	out	0x08, r24	; 8
		
		if((TCNT0 % 5)==0)	//checks if the 5th rising pulse is encountered
  d2:	86 b5       	in	r24, 0x26	; 38
  d4:	8c 9f       	mul	r24, r28
  d6:	91 2d       	mov	r25, r1
  d8:	11 24       	eor	r1, r1
  da:	96 95       	lsr	r25
  dc:	96 95       	lsr	r25
  de:	29 2f       	mov	r18, r25
  e0:	22 0f       	add	r18, r18
  e2:	22 0f       	add	r18, r18
  e4:	92 0f       	add	r25, r18
  e6:	89 13       	cpse	r24, r25
  e8:	ec cf       	rjmp	.-40     	; 0xc2 <main+0x22>
		{
			PORTB ^= 0X10;	//toggle PORTB.4 
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	81 27       	eor	r24, r17
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	e8 cf       	rjmp	.-48     	; 0xc2 <main+0x22>

000000f2 <__vector_1>:
		TIFR1 = 0X01; // clears the interrupt flag
					//by writing 1 to it
}

ISR (INT0_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	TCNT2++ ;	//Timer counter 2
 104:	e2 eb       	ldi	r30, 0xB2	; 178
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 83       	st	Z, r24
	if (TCNT2 == 0X0002)	//checks if INT0 occurs
 10e:	80 81       	ld	r24, Z
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	31 f4       	brne	.+12     	; 0x120 <__vector_1+0x2e>
	{
		PORTB ^= (1<<4);	//toggle PC4
 114:	95 b1       	in	r25, 0x05	; 5
 116:	80 e1       	ldi	r24, 0x10	; 16
 118:	89 27       	eor	r24, r25
 11a:	85 b9       	out	0x05, r24	; 5
		TCNT2 = 0;	//clears counter
 11c:	10 92 b2 00 	sts	0x00B2, r1
	}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
