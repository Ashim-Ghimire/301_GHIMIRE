
DA3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000130  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c6  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000012c  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d4  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000de  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000f12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <convert_to_digital>:
 #include <inttypes.h>
 #include <avr/interrupt.h>
 
 void convert_to_digital(){
	 //start analog to digital conversion
	 ADCSRA |= (1<<ADSC);
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	 while ((ADCSRA&(1<<ADIF))==0){
  8a:	80 81       	ld	r24, Z
  8c:	84 ff       	sbrs	r24, 4
  8e:	fd cf       	rjmp	.-6      	; 0x8a <convert_to_digital+0xa>
		 //wait for conversion to finish
	 }
 }
  90:	08 95       	ret

00000092 <usart_init>:
 
 void usart_init() {
	
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	80 93 c1 00 	sts	0x00C1, r24
	//set frame format: 8bit, 
	UCSR0C = (1<<UCSZ00) | (3<<UCSZ01);
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	80 93 c2 00 	sts	0x00C2, r24
	//set baud rate
	UBRR0 = 0x0033;
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	90 93 c5 00 	sts	0x00C5, r25
  a6:	80 93 c4 00 	sts	0x00C4, r24
  aa:	08 95       	ret

000000ac <usart_send>:
 }
 
 void usart_send(uint8_t ch){
	 //wait for buffer to be ready to write to
	 while(!(UCSR0A &(1<<UDRE0)));
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <usart_send+0x4>
	 UDR0 = ch;
  b6:	80 93 c6 00 	sts	0x00C6, r24
  ba:	08 95       	ret

000000bc <main>:
 }
 
 int main(void)
 {
	DDRC = 0x00;	//input porb
  bc:	17 b8       	out	0x07, r1	; 7
	 DDRD = 0xFF;	//output port
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a b9       	out	0x0a, r24	; 10
	 
	 //variable for temperatures
	 	
	 //enable ADC, divide clock by 64 for 125kHz sampling
	ADCSRA = (1<<ADEN); 
  c2:	80 e8       	ldi	r24, 0x80	; 128
  c4:	80 93 7a 00 	sts	0x007A, r24
	 //REF0 and REF1 for "AVcc with external capacitor on AREF pin" mode
	ADMUX= 0X00;
  c8:	10 92 7c 00 	sts	0x007C, r1
	
	 usart_init();
  cc:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	 
	 TCCR1A = 0X00;//gives system clock
  d0:	10 92 80 00 	sts	0x0080, r1
	 TCCR1B = 0X0D;//enable CTC mode, prescalar set to 1024	
  d4:	8d e0       	ldi	r24, 0x0D	; 13
  d6:	80 93 81 00 	sts	0x0081, r24
	 OCR1A = 0X1E84; //8MHz/1024 = 0x1E84
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	9e e1       	ldi	r25, 0x1E	; 30
  de:	90 93 89 00 	sts	0x0089, r25
  e2:	80 93 88 00 	sts	0x0088, r24
	 
	 TIMSK1 |= (1<<OCIE1A);//calls interrupt function
  e6:	ef e6       	ldi	r30, 0x6F	; 111
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
	 sei();
  f0:	78 94       	sei
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x36>

000000f4 <__vector_11>:
	 while(1){
		  }
		  return 0;
 }
 
 ISR(TIMER1_COMPA_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	 uint8_t temp;
	 convert_to_digital();
 116:	0e 94 40 00 	call	0x80	; 0x80 <convert_to_digital>
	 temp = ADC;
 11a:	80 91 78 00 	lds	r24, 0x0078
 11e:	90 91 79 00 	lds	r25, 0x0079
	 usart_send(temp);
 122:	0e 94 56 00 	call	0xac	; 0xac <usart_send>
	 
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	7f 91       	pop	r23
 134:	6f 91       	pop	r22
 136:	5f 91       	pop	r21
 138:	4f 91       	pop	r20
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
