
DA4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f2  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000085  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000010f  00000000  00000000  00000347  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013b  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003c  00000000  00000000  000005d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
#include <util/delay.h>


void delay(void){
	//holds the colors for this time
	TCNT1 = 0;
  80:	e4 e8       	ldi	r30, 0x84	; 132
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	11 82       	std	Z+1, r1	; 0x01
  86:	10 82       	st	Z, r1
	while(TCNT1 < 0x4e20){	//count until 20000 in decimal 
  88:	80 81       	ld	r24, Z
  8a:	91 81       	ldd	r25, Z+1	; 0x01
  8c:	80 32       	cpi	r24, 0x20	; 32
  8e:	9e 44       	sbci	r25, 0x4E	; 78
  90:	50 f4       	brcc	.+20     	; 0xa6 <delay+0x26>
		TCNT1++;
  92:	80 81       	ld	r24, Z
  94:	91 81       	ldd	r25, Z+1	; 0x01
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	91 83       	std	Z+1, r25	; 0x01
  9a:	80 83       	st	Z, r24


void delay(void){
	//holds the colors for this time
	TCNT1 = 0;
	while(TCNT1 < 0x4e20){	//count until 20000 in decimal 
  9c:	80 81       	ld	r24, Z
  9e:	91 81       	ldd	r25, Z+1	; 0x01
  a0:	80 32       	cpi	r24, 0x20	; 32
  a2:	9e 44       	sbci	r25, 0x4E	; 78
  a4:	b0 f3       	brcs	.-20     	; 0x92 <delay+0x12>
  a6:	08 95       	ret

000000a8 <PWM_init>:
	}
}

void PWM_init(void)
{
	TCCR0A = (1<<WGM00) | (1<<WGM01) | (1<<COM0B1) | (1<<COM0A1); // Non-inverting Fast PWM
  a8:	83 ea       	ldi	r24, 0xA3	; 163
  aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<WGM02) | (1<<CS01); // no prescalar
  ac:	8a e0       	ldi	r24, 0x0A	; 10
  ae:	85 bd       	out	0x25, r24	; 37
	
	TCCR2A = (1<<WGM20) | (1<<WGM21) | (1<<COM2B1); // Non inverting Fast PWM
  b0:	93 e2       	ldi	r25, 0x23	; 35
  b2:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1<<WGM22) | (1<<CS21); // no prescalar 
  b6:	80 93 b1 00 	sts	0x00B1, r24
  ba:	08 95       	ret

000000bc <main>:
}

int main(void)
{
	DDRD = (1<<PORTD3) | (1<<PORTD5) | (1<<PORTD6); //set PORTB to display RGB LED
  bc:	88 e6       	ldi	r24, 0x68	; 104
  be:	8a b9       	out	0x0a, r24	; 10
	int duty = 0;
	
	PWM_init();	//generates PWM
  c0:	0e 94 54 00 	call	0xa8	; 0xa8 <PWM_init>
	
	while(1){
		for (duty=20; duty < 230; duty++){	//alter duty cycle for RED
  c4:	04 e1       	ldi	r16, 0x14	; 20
  c6:	10 e0       	ldi	r17, 0x00	; 0
			OCR0A = duty;	//output compare register 
			
			delay();	//delay subroutine
		}
		OCR0A = 0;	//clears the PWM
  c8:	0f 2e       	mov	r0, r31
  ca:	f4 e1       	ldi	r31, 0x14	; 20
  cc:	ff 2e       	mov	r15, r31
  ce:	f0 2d       	mov	r31, r0
			delay();	//delay subroutine
		}
		OCR0B = 0;	//clears the PWM
		
		for (duty=20; duty < 230; duty++){	//alter duty cycle for BLUE
			OCR2B = duty;	
  d0:	c4 eb       	ldi	r28, 0xB4	; 180
  d2:	d0 e0       	ldi	r29, 0x00	; 0
	int duty = 0;
	
	PWM_init();	//generates PWM
	
	while(1){
		for (duty=20; duty < 230; duty++){	//alter duty cycle for RED
  d4:	0f 2e       	mov	r0, r31
  d6:	f4 e1       	ldi	r31, 0x14	; 20
  d8:	df 2e       	mov	r13, r31
  da:	f0 2d       	mov	r31, r0
  dc:	e1 2c       	mov	r14, r1
  de:	05 c0       	rjmp	.+10     	; 0xea <main+0x2e>
			OCR0A = duty;	//output compare register 
  e0:	07 bd       	out	0x27, r16	; 39
			
			delay();	//delay subroutine
  e2:	0e 94 40 00 	call	0x80	; 0x80 <delay>
	int duty = 0;
	
	PWM_init();	//generates PWM
	
	while(1){
		for (duty=20; duty < 230; duty++){	//alter duty cycle for RED
  e6:	0f 5f       	subi	r16, 0xFF	; 255
  e8:	1f 4f       	sbci	r17, 0xFF	; 255
  ea:	06 3e       	cpi	r16, 0xE6	; 230
  ec:	11 05       	cpc	r17, r1
  ee:	c4 f3       	brlt	.-16     	; 0xe0 <main+0x24>
			OCR0A = duty;	//output compare register 
			
			delay();	//delay subroutine
		}
		OCR0A = 0;	//clears the PWM
  f0:	17 bc       	out	0x27, r1	; 39
  f2:	1f 2d       	mov	r17, r15
		
		for (duty=20; duty < 230; duty++){	//alter duty cycle for GREEN
			OCR0B = duty;
  f4:	18 bd       	out	0x28, r17	; 40
			delay();	//delay subroutine
  f6:	0e 94 40 00 	call	0x80	; 0x80 <delay>
  fa:	1f 5f       	subi	r17, 0xFF	; 255
			
			delay();	//delay subroutine
		}
		OCR0A = 0;	//clears the PWM
		
		for (duty=20; duty < 230; duty++){	//alter duty cycle for GREEN
  fc:	16 3e       	cpi	r17, 0xE6	; 230
  fe:	d1 f7       	brne	.-12     	; 0xf4 <main+0x38>
			OCR0B = duty;
			delay();	//delay subroutine
		}
		OCR0B = 0;	//clears the PWM
 100:	18 bc       	out	0x28, r1	; 40
 102:	1f 2d       	mov	r17, r15
		
		for (duty=20; duty < 230; duty++){	//alter duty cycle for BLUE
			OCR2B = duty;	
 104:	18 83       	st	Y, r17
			delay();	//delay subroutine
 106:	0e 94 40 00 	call	0x80	; 0x80 <delay>
 10a:	1f 5f       	subi	r17, 0xFF	; 255
			OCR0B = duty;
			delay();	//delay subroutine
		}
		OCR0B = 0;	//clears the PWM
		
		for (duty=20; duty < 230; duty++){	//alter duty cycle for BLUE
 10c:	16 3e       	cpi	r17, 0xE6	; 230
 10e:	d1 f7       	brne	.-12     	; 0x104 <main+0x48>
			OCR2B = duty;	
			delay();	//delay subroutine
		}
		OCR2B = 0;	//clears PWM
 110:	18 82       	st	Y, r1
	int duty = 0;
	
	PWM_init();	//generates PWM
	
	while(1){
		for (duty=20; duty < 230; duty++){	//alter duty cycle for RED
 112:	0d 2d       	mov	r16, r13
 114:	1e 2d       	mov	r17, r14
		for (duty=20; duty < 230; duty++){	//alter duty cycle for BLUE
			OCR2B = duty;	
			delay();	//delay subroutine
		}
		OCR2B = 0;	//clears PWM
	}
 116:	e9 cf       	rjmp	.-46     	; 0xea <main+0x2e>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
